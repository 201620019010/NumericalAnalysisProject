from gaussian import augmentedMatrixform, progressiveSustitution, regressiveSustitution, partialPivot, swapMarks, rearrange

Enter A
Enter B
stage -> 0

L -> []
for i in range len(A)
    row -> []
    for j in range len(A)
        if i diferent j
            row add in the end 0.0
        else
            row  add in the end 1.0
    L.append(row)
U ->  0.0 for i in range len(A)  for j in range(len(A))]
A -> i for i in j for j in A
U position 0 -> i for i in A position 0

funtion factorizationLU(A, b, n, stage)
    Ab -> augmentedMatrixform(A,b)  
    marks -> i for i in range(n)                 
    for k in range(n-1)
        L[k][k] -> 1
        Ab, higher -> partialPivot(Ab, n, k, True)
        if higher diferent k
            marks -> swapMarks(marks, higher, k)
        mults_aux -> {}
        for i in range(k+1, n):
            mults_aux[(i,k)] -> multiplicator -> Ab[i][k] / Ab[k][k]
            for j in range(k, n+1)
                Ab[i][j] -> multiplicator * Ab[k][j]
        for i, j in mults_aux:
            Ab[i][j] -> mults_aux[(i,j)]
        for i, j in mults_aux
            L[i][j] -> Ab[i][j]
        stage -> stage + 1
    
        print stage
      
        for i in Ab
            result -> ""
            for j in i len(Ab)
                result -> result +  j
            print result
        
        print "L:"
        for i in L
            result -> ""
            for j in i:
                result -> result +  j
            print result
        
        print "U:"
        i -> Ab[stage]
        U[stage] -> i[:len(Ab)]
        for i in U
            result->  ""
            for j in i
                result -> result +  j
            print result
    
        print "P:(marks)"
        result -> ""
        for i in marks
            l -> float(i)
            result   -> result  0
        print result
       
    return Ab, marks


print "LU with partial pivot:" 

print "Results"

print stage


for i in A
    result -> ""
    for j in i
        result ->resul + j
    print result 
Ab, marks -> factorizationLU(A,b, len(A), stage)

b = rearrange(b, marks)
Lb -> augmentedMatrixform(L,b)
z -> progressiveSustitution(Lb,len(L))
Uz -> augmentedMatrixform(U,z)
x -> regressiveSustitution(Uz,len(U))

print "After apply progressive and regressive sustitution"

print"x:"
for i in x
    print i