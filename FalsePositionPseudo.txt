#Pseudocode
Algorithm False Position 

var =xi,xs,tol,niter

START

 read f,xi,xs,tol,niter
 fxi <- f(xi)
 fxs <- f(xs)
 if fxi = 0 then
 xi is a root
 else 
 if fxs = 0 then
 xs is a root
 if (fxi * fxs) < 0 then
    xm <- (xi) - ((fxi*(xs-xi)) / (fxs-fxi))
    fxm <- f(xm)
    count <- 1
    error <- tol + 1

    while (error > tol) and (fxm != 0) and (count < niter):
        if error == tol + 1 then
            print(f" {count}  {xi:.10e}  {xm:.10e}  {xs:.10e}  {fxm:.10e}")
        else:
            if count < 3 then
                print(f" {count}  {xi:.10e}  {xm:.10e}  {xs:.10e}  {fxm:.10e}  {error:.10e}")
            else:
                print(f" {count}  {xi:.10e}  {xm:.10e}  {xs:.10e}  {fxm:.10e}  {error:.10e}")
        if (fxi * fxm) < 0 then
            xs <- xm
            fxs <- fxm
        else:
            xi <- xm
            fxi <- fxm
        xaux <- xm
        xm <- (xi) - ((fxi*(xs-xi)) / (fxs-fxi))
        fxm = f(xm)
        error <- abs(xm - xaux)
        count <- count + 1
    if count < 3 then
        print(f" {count}  {xi:.10e}  {xm:.10e}  {xs:.10e}  {fxm:.10e}  {error:.10e}")
    else:
        print(f" {count}  {xi:.10e}  {xm:.10e}  {xs:.10e}  {fxm:.10e}  {error:.10e}")
    if fxm =0 then
        print(f"{xm} is a root")
    elif error < tol:
        print(f" {xm} is an approximation to a root with a tolerance:",tol)
    else:
        print(f"Failed in  {niter} iterations")
else:
    print("The interval is inappropriate") 
 end if

END